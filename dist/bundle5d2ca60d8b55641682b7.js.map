{"version":3,"file":"bundle5d2ca60d8b55641682b7.js","mappings":";;;;;AAAAA,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E","sources":["webpack://todo-app/./src/index.js"],"sourcesContent":["console.log('test')\n/* \n\nProject Management: Functions to add, edit, and delete projects. This is crucial for organizing tasks.\n\nTask Management: Functions for adding, editing, and deleting tasks, along with filtering tasks by date, priority.\n\nSubtask Management: Functions for adding, editing, and deleting subtasks within a task.\n\n------. These functions should save data to local storage and retrieve data from it.\n\n\nProgress Tracking: Calculate and update project progress within your frontend code based on completed tasks stored in local storage. This could be done using a function that calculates the percentage of completed tasks in a project.\n\nViewing Options: Develop functions to filter and display tasks by day, week, or month within your app, using the data stored in local storage.These functions will allow users to visualize their tasks over different timeframes.\n\nData Storage: Utilize the browser's local storage API to store and retrieve data. You can use localStorage or sessionStorage to manage your app's data.\n\n\n----------DATA STRUCTURES-----------\nclass User {\n  constructor(userId, username, email, password) {\n    this.userId = userId;\n    this.username = username;\n    this.email = email;\n    this.password = password;\n    this.projects = [];\n  }\n}\n\nclass Project {\n  constructor(projectId, title, description) {\n    this.projectId = projectId;\n    this.title = title;\n    this.description = description;\n    this.progress = 0; // Progress percentage\n    this.creationDate = new Date();\n    this.tasks = [];\n  }\n}\n\nclass Task {\n  constructor(taskId, title, description, dueDate, priority, category) {\n    this.taskId = taskId;\n    this.title = title;\n    this.description = description;\n    this.dueDate = dueDate;\n    this.priority = priority;\n    this.category = category;\n    this.status = \"Incomplete\";\n    this.subtasks = [];\n  }\n}\n\nclass Subtask {\n  constructor(subtaskId, description) {\n    this.subtaskId = subtaskId;\n    this.description = description;\n    this.status = \"Incomplete\";\n  }\n}\n\n// Example usage:\n\n// Create a user\nconst user1 = new User(1, \"exampleUser\", \"user@example.com\", \"hashedPassword\");\n\n// Create a project for the user\nconst project1 = new Project(1, \"Project 1\", \"Description of project 1\");\nuser1.projects.push(project1);\n\n// Create a task within the project\nconst task1 = new Task(1, \"Task 1\", \"Description of task 1\", new Date(\"2023-11-15\"), \"High\", \"Work\");\nproject1.tasks.push(task1);\n\n// Create subtasks within the task\nconst subtask1 = new Subtask(1, \"Subtask 1\");\ntask1.subtasks.push(subtask1);\n\n// Accessing data\nconsole.log(user1); // Access user and their projects\nconsole.log(project1); // Access a project and its tasks\nconsole.log(task1); // Access a task and its subtasks\nconsole.log(subtask1); // Access a subtask\n\n\n-----------Using localStorage-------\nDefine your classes as shown in the previous example.\n\nWhen you need to save or retrieve data to/from local storage, you can use the JSON.stringify and JSON.parse methods to convert your objects to JSON strings and vice versa.\n\nWhen your app loads, check if the data exists in local storage. If not, create empty arrays to represent user, project, task, and subtask data structures. If it does exist, parse the JSON strings from local storage back into your object instances.\n\n// Saving data to local storage\nlocalStorage.setItem('userData', JSON.stringify(user1));\nlocalStorage.setItem('projectData', JSON.stringify(user1.projects));\nlocalStorage.setItem('taskData', JSON.stringify(project1.tasks));\nlocalStorage.setItem('subtaskData', JSON.stringify(subtask1));\n\n// Retrieving data from local storage\nconst savedUser = JSON.parse(localStorage.getItem('userData'));\nconst savedProjects = JSON.parse(localStorage.getItem('projectData'));\nconst savedTasks = JSON.parse(localStorage.getItem('taskData'));\nconst savedSubtasks = JSON.parse(localStorage.getItem('subtaskData'));\n\n// Check if data exists in local storage\nif (savedUser) {\n  // If data exists, create instances from saved data\n  const user1 = new User(savedUser.userId, savedUser.username, savedUser.email, savedUser.password);\n  user1.projects = savedProjects || [];\n  // Continue to populate your data structure\n} else {\n  // If no data exists, create new instances as needed\n  const user1 = new User(1, \"exampleUser\", \"user@example.com\", \"hashedPassword\");\n  const project1 = new Project(1, \"Project 1\", \"Description of project 1\");\n  user1.projects.push(project1);\n  // Continue to populate your data structure\n}\n\n\n\n-----------Using webpack to generate diferent HTML files from templates------\nmodule.exports = {\n  entry: {\n    app: './src/app.js', // Entry point for your main JavaScript bundle\n    anotherPage: './src/anotherPage.js', // Entry point for another JavaScript bundle\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html', // Template HTML file for the main entry\n      filename: 'index.html', // Output HTML file name\n      chunks: ['app'], // Include only 'app' JavaScript bundle\n    }),\n    new HtmlWebpackPlugin({\n      template: './src/anotherPage.html', // Template HTML file for another entry\n      filename: 'anotherPage.html', // Output HTML file name\n      chunks: ['anotherPage'], // Include only 'anotherPage' JavaScript bundle\n    }),\n  ],\n};\n\n\n*/"],"names":["console","log"],"sourceRoot":""}